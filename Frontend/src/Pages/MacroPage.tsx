import { type JSX } from "react";
import MacroPieChart from "@/components/ui/pieChartContainer";
import useUserData from "../data/useuserData";
import { useMemo } from "react";
import { generateMealPlan } from "@/components/generateMealPlan";
import { useEffect } from "react";
import MealSection from "@/components/ui/MealSection";
import {
  CardContent,
  CardHeader,
  CardTitle,
  Card
} from "@/components/ui/card";
import { getDailyMacroTotals } from "@/lib/getMacroTotals";
import MacroStatBox from "@/components/ui/MacroStatBox";
import { macroConfig } from "@/data/Constants";
import { useMealPlanStore } from "@/data/mealPlanStore";
import { useState, useRef } from "react";

export default function MacroPage(): JSX.Element {
  const { age, gender, heightCm, weight, activityLevel, goal, preference, BMR, goalCals} = useUserData();
  const {weeklyMealPlan, setWeeklyMealPlan,loading, setLoading} = useMealPlanStore();
  const [selectedDay, setSelectedDay] = useState("day 1");

  const currentInputs = useMemo(() => ({ 
    age: age as number, 
    gender, 
    heightCm: heightCm as number, 
    weight: weight as number, 
    activityLevel: activityLevel as string, 
    goal, 
    preference,
    BMR: BMR as number,
    goalCals: goalCals as number
  }),[age, gender, heightCm, weight, activityLevel, goal, preference, BMR, goalCals]);
  
  const hasGenerated = useRef<string | null>(null);

  useEffect(() => {
    const inputs = JSON.stringify(currentInputs);
    const hasAllRequiredData = age && weight && BMR && goal && goalCals && gender && preference;
    
    if (hasGenerated.current !== inputs && hasAllRequiredData) {
      setLoading(true);
      hasGenerated.current = inputs; 

      generateMealPlan().then((data) => {
        setWeeklyMealPlan(data, currentInputs);
        setLoading(false);
        console.log("Gemini API pinged for inputs:", inputs);
      }).catch((error) => {
        console.error("Error generating meal plan:", error);
        setLoading(false);
        hasGenerated.current = null;
      });
    }
  }, [currentInputs]);  const totals = useMemo(() => {
    if(!weeklyMealPlan) return null;
    return getDailyMacroTotals(weeklyMealPlan)}, [weeklyMealPlan]);

    const macroGramChartData = useMemo(() => {
      const dayTotal = totals?.[selectedDay];
      if (!dayTotal) return [];
        return [
          { name: "Protein", value: dayTotal.protein, fill: "#3B82F6" }, // green
          { name: "Carbs", value: dayTotal.carbs, fill: "#10B981" },     // blue
          { name: "Fat", value: dayTotal.fat, fill: "#F59E0B" },         // amber
        ];
      }, [selectedDay, totals]);
      
    if (loading || !weeklyMealPlan) {
      return(
          <div className="text-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-base-content/70">Generating your personalized meal plan...</p>
        </div>
      );
  }

  return (
    <div className="container mx-auto p-6 space-y-6 bg-base-100">
      <div className="text-center">
        <h1 className="text-3xl font-bold mb-2 text-primary">Your Meal Plan</h1>
        <p className="text-muted-foreground text-base-content">Generated by AI for your fitness goals</p>
      </div>
      {/* Top Tabs for Each Day */}
    <div className="tabs tabs-bordered justify-center mb-6 capitalize">
      {Object.keys(weeklyMealPlan).map((day) => (
        <a
          key={day}
          role="tab"
          className={`tab ${selectedDay === day ? "tab-active text-accent text-2xl" : "text-xl"}`}
          onClick={() => setSelectedDay(day)}
        >
          {day}
        </a>
      ))}
    </div>

  {/* Single Day's Content */}
  <div className="space-y-8">
    <div key={selectedDay} className="border-b pb-6 mb-8">
      <h1 className="text-3xl font-bold mb-4 capitalize text-secondary">{selectedDay}</h1>

      <Card className="bg-base-200 text-base-content shadow-md border border-base-300/60">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <span>ðŸ“Š</span>
            Day's Macro Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          {totals?.[selectedDay] && (
            <div className="grid grid-cols-2 gap-4 md:grid-cols-4 text-center">
              {macroConfig.map((macro) => (
                <MacroStatBox
                  key={macro.key}
                  label={macro.label}
                  value={totals[selectedDay][macro.key]}
                  colorClass={macro.color}
                  unit={macro.unit}
                />
              ))}
              <div className="col-span-2 md:col-start-2">
              <MacroPieChart data={macroGramChartData} title="Macro Distribution" />
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <div className="space-y-8 mt-6">
        {Array.isArray(Object.entries(weeklyMealPlan[selectedDay] || {})) &&
          Object.entries(weeklyMealPlan[selectedDay] || {}).map(([mealType, items]) => (
            <MealSection key={mealType} mealType={mealType} items={items} />
        ))}
      </div>
    </div>
  </div>
      </div>
  );
}
